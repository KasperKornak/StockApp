name: Deploy

env:
    BACKEND_VARS: ${{ secrets.BACKEND_VARS }}

on:
  workflow_dispatch:
    inputs:
      uselessVariable:
        required: false
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.18
      id: go

    - name: Check out code
      uses: actions/checkout@v2 

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Build
      run: |
        go build main.go

    - name: Copy binary to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        source: "./main"
        target: "~"

    - name: Copy HTML files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        source: "templates/"
        target: "~"

    - name: Copy static files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        source: "static/"
        target: "~"

    - name: Create .env file in cmd directory
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            echo "${BACKEND_VARS}" > ~/.env
            chmod 711 ~/.env
          envs: BACKEND_VARS

    - name: Kill existing backend process
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        script: |
          cleanup() {
            echo "Received termination signal. Cleaning up..."
          }
          trap cleanup SIGTERM
          main_pids=$(pgrep -f "/home/ubuntu/main")
          if [ -z "$main_pids" ]; then
            echo "No processes found for /home/ubuntu/main."
          else
            echo "Found the following processes for /home/ubuntu/main:"
            echo "$main_pids"
            echo "Killing these processes..."
            sudo kill -TERM $main_pids
            echo "Processes termination signal sent."
            wait $main_pids || exit_status=$?
            if [ "$exit_status" = "137" ]; then
              echo "Processes terminated with status 137."
            else
              echo "Processes exited with status $exit_status."
            fi
            echo "Processes killed."
          fi
          
    - name: Run backend on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        script: |
            sudo chmod +x ~/main 
            sudo chmod 711 ~/main 
            sudo nohup ~/main > app.log 2>&1 &


